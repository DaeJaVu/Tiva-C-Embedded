<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Jul 21 18:28:44 2019
<BR><P>
<H3>Maximum Stack Usage =        272 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Run &rArr; InitHardware &rArr; FrequencyTimer_Enable &rArr; Timer_Init &rArr; ConfigureEdgeTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8]">Reset_Handler</a>
 <LI><a href="#[21]">__user_initial_stackheap</a>
 <LI><a href="#[3]">NmiSR</a>
 <LI><a href="#[4]">FaultISR</a>
 <LI><a href="#[5]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NmiSR</a><BR>
 <LI><a href="#[4]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">FaultISR</a><BR>
 <LI><a href="#[5]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 112 times from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">TimerEventCallback</a> from frequencytimer.o(i.TimerEventCallback) referenced from frequencytimer.o(.constdata)
 <LI><a href="#[6]">Timer_TIMER2Handler</a> from hal_timer.o(i.Timer_TIMER2Handler) referenced 2 times from startup_rvmdk.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[69]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[13]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[6c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[70]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[71]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[72]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[73]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[74]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[75]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[76]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[77]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[78]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[79]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[18]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[80]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[81]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[84]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[85]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[86]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[87]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[10]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[88]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[14]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Run &rArr; InitHardware &rArr; FrequencyTimer_Enable &rArr; Timer_Init &rArr; ConfigureEdgeTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[89]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[22]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[17]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[8a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[19]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[21]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQHandler
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1c]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[91]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1d]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[11]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[16]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1f]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[23]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[94]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[95]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>FrequencyTimer_Enable</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, frequencytimer.o(i.FrequencyTimer_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FrequencyTimer_Enable &rArr; Timer_Init &rArr; ConfigureEdgeTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartEdgeTimer
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[2c]"></a>FrequencyTimer_GetFrequency</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, frequencytimer.o(i.FrequencyTimer_GetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrequencyTimer_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run
</UL>

<P><STRONG><a name="[25]"></a>GPIO_EnableAltDigital</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, hal_gpio.o(i.GPIO_EnableAltDigital))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_EnableAltDigital
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPort
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureEdgeTimer
</UL>

<P><STRONG><a name="[30]"></a>GPIO_EnableDI</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, hal_gpio.o(i.GPIO_EnableDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_EnableDI
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPort
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataDirection
</UL>

<P><STRONG><a name="[31]"></a>GPIO_EnableDO</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, hal_gpio.o(i.GPIO_EnableDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPort
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataDirection
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
</UL>

<P><STRONG><a name="[32]"></a>GPIO_GetBitBandIOAddress</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hal_gpio.o(i.GPIO_GetBitBandIOAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_GetBitBandIOAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
</UL>

<P><STRONG><a name="[2f]"></a>GPIO_InitPort</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_gpio.o(i.GPIO_InitPort))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableDO
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableDI
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableAltDigital
</UL>

<P><STRONG><a name="[38]"></a>LCD_EnableCursor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lcd.o(i.LCD_EnableCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_EnableCursor &rArr; LCD_RawSetDisplayControl &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDisplayControl
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[37]"></a>LCD_Initialize</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lcd.o(i.LCD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_Initialize &rArr; LCD_RawInitialize &rArr; LCD_RawSetFunction &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetEntryMode
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDisplayControl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawClearDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[3e]"></a>LCD_PutString</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, lcd.o(i.LCD_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_PutString &rArr; LCD_SetCursorPosition &rArr; LCD_RawSetDDRAMAddress &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDDRAMAddress
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawPutChar
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDDRAMAddress
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursorPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
</UL>

<P><STRONG><a name="[3d]"></a>LCD_RawClearDisplay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_raw.o(i.LCD_RawClearDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_RawClearDisplay &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run
</UL>

<P><STRONG><a name="[3b]"></a>LCD_RawInitialize</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lcd_raw.o(i.LCD_RawInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_RawInitialize &rArr; LCD_RawSetFunction &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetFunction
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetEntryMode
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDisplayControl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawClearDisplay
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetBitBandIOAddress
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableDO
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[42]"></a>LCD_RawPutChar</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_raw.o(i.LCD_RawPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_RawPutChar &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>

<P><STRONG><a name="[41]"></a>LCD_RawSetDDRAMAddress</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd_raw.o(i.LCD_RawSetDDRAMAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_RawSetDDRAMAddress &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursorPosition
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>

<P><STRONG><a name="[3a]"></a>LCD_RawSetDisplayControl</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lcd_raw.o(i.LCD_RawSetDisplayControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_RawSetDisplayControl &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_EnableCursor
</UL>

<P><STRONG><a name="[3c]"></a>LCD_RawSetEntryMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd_raw.o(i.LCD_RawSetEntryMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_RawSetEntryMode &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[47]"></a>LCD_RawSetFunction</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lcd_raw.o(i.LCD_RawSetFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_RawSetFunction &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
</UL>

<P><STRONG><a name="[39]"></a>LCD_SetCursorPosition</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lcd.o(i.LCD_SetCursorPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_SetCursorPosition &rArr; LCD_RawSetDDRAMAddress &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDDRAMAddress
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDDRAMAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[28]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hal_nvic.o(i.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NVIC_EnableIRQ &rArr; SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQHandler
</UL>

<P><STRONG><a name="[35]"></a>PLL_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hal_pll.o(i.PLL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PLL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[4a]"></a>Run</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, device.o(i.Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Run &rArr; InitHardware &rArr; FrequencyTimer_Enable &rArr; Timer_Init &rArr; ConfigureEdgeTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawClearDisplay
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyTimer_GetFrequency
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>SysTick_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hal_systick.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[4e]"></a>SysTick_Wait</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_systick.o(i.SysTick_Wait))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait10ms
</UL>

<P><STRONG><a name="[4b]"></a>SysTick_Wait10ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_systick.o(i.SysTick_Wait10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Wait10ms
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run
</UL>

<P><STRONG><a name="[2a]"></a>Timer_Init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, hal_timer.o(i.Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Timer_Init &rArr; ConfigureEdgeTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureIntervalTimer
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureEdgeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyTimer_Enable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[2b]"></a>Timer_StartEdgeTimer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_timer.o(i.Timer_StartEdgeTimer))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyTimer_Enable
</UL>

<P><STRONG><a name="[50]"></a>Timer_StartInterval</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_timer.o(i.Timer_StartInterval))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
</UL>

<P><STRONG><a name="[6]"></a>Timer_TIMER2Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_timer.o(i.Timer_TIMER2Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer_TIMER2Handler &rArr; HandleInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>Timer_Wait</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, hal_timer.o(i.Timer_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetFunction
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetEntryMode
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDisplayControl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDDRAMAddress
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawPutChar
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawClearDisplay
</UL>

<P><STRONG><a name="[43]"></a>TransferByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd_raw.o(i.TransferByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetFunction
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetEntryMode
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDisplayControl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawSetDDRAMAddress
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawPutChar
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawClearDisplay
</UL>

<P><STRONG><a name="[51]"></a>dtoa</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, strings.o(i.dtoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dtoa &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
</UL>

<P><STRONG><a name="[15]"></a>main</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = main &rArr; Run &rArr; InitHardware &rArr; FrequencyTimer_Enable &rArr; Timer_Init &rArr; ConfigureEdgeTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[53]"></a>pad</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, strings.o(i.pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pad
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
</UL>

<P><STRONG><a name="[3f]"></a>strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strings.o(i.strlen))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pad
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>

<P><STRONG><a name="[52]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strings.o(i.strncat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
</UL>

<P><STRONG><a name="[96]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[98]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[99]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[9a]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
</UL>

<P><STRONG><a name="[5c]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[64]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyTimer_GetFrequency
</UL>

<P><STRONG><a name="[60]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
</UL>

<P><STRONG><a name="[61]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
</UL>

<P><STRONG><a name="[62]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
</UL>

<P><STRONG><a name="[9b]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyTimer_GetFrequency
</UL>

<P><STRONG><a name="[9c]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
</UL>

<P><STRONG><a name="[63]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[9d]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
</UL>

<P><STRONG><a name="[65]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[5e]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
</UL>

<P><STRONG><a name="[66]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[68]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[9f]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[a0]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[33]"></a>GetPinNumber</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_gpio.o(i.GetPinNumber))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetBitBandIOAddress
</UL>

<P><STRONG><a name="[48]"></a>SetPriority</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, hal_nvic.o(i.SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[49]"></a>SetBusClockFreq</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hal_pll.o(i.SetBusClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
</UL>

<P><STRONG><a name="[24]"></a>ConfigureEdgeTimer</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hal_timer.o(i.ConfigureEdgeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ConfigureEdgeTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableAltDigital
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[27]"></a>ConfigureIntervalTimer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hal_timer.o(i.ConfigureIntervalTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ConfigureIntervalTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[26]"></a>EnableIRQHandler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, hal_timer.o(i.EnableIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureIntervalTimer
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureEdgeTimer
</UL>

<P><STRONG><a name="[4f]"></a>HandleInterrupt</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, hal_timer.o(i.HandleInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HandleInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TIMER2Handler
</UL>

<P><STRONG><a name="[3]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>InitHardware</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, device.o(i.InitHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = InitHardware &rArr; FrequencyTimer_Enable &rArr; Timer_Init &rArr; ConfigureEdgeTimer &rArr; EnableIRQHandler &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursorPosition
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_EnableCursor
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrequencyTimer_Enable
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run
</UL>

<P><STRONG><a name="[4c]"></a>UpdateDisplay</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, device.o(i.UpdateDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UpdateDisplay &rArr; LCD_PutString &rArr; LCD_SetCursorPosition &rArr; LCD_RawSetDDRAMAddress &rArr; TransferByte &rArr; Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pad
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtoa
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run
</UL>

<P><STRONG><a name="[40]"></a>GetDDRAMAddress</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lcd.o(i.GetDDRAMAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetDDRAMAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursorPosition
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>

<P><STRONG><a name="[4d]"></a>SetDataDirection</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lcd_raw.o(i.SetDataDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableDO
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableDI
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer
</UL>

<P><STRONG><a name="[46]"></a>Transfer</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lcd_raw.o(i.Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Transfer &rArr; SetDataDirection &rArr; GPIO_EnableDO
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataDirection
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferByte
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RawInitialize
</UL>

<P><STRONG><a name="[7]"></a>TimerEventCallback</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, frequencytimer.o(i.TimerEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frequencytimer.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[5d]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
